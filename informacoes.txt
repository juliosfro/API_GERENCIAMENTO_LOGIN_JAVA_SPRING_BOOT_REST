- Java Extension Pack
- Spring Boot Extension Pack que contém dentro:
    * Spring Boot Tools
    * Spring Initializr Java Support
    * Spring Boot Dashboard
- Lombok Annotations Support for VS Code
- Para ver a tela do Java OverView apertar command + shift + p 
e digitar OverView
- Temos que ter o maven instalado no Mac
- Verificar se o gerenciador de dependencias Homebrew está instalado
- Digitar brew -v no terminal do Mac
- Para instalar o maven no Mac basta digitar no terminal brew install maven
- Para verificar se o maven está instalado digitamos: mvn --version
- No momento da criação escolher lombok e restRepositories.

- Vamos criar nosso projeto usando o Spring Tool Suite (STS).
- O primeiro passo é configurar o projeto com tudo que iremos precisar.
- Podemos criar o projeto pelo site do spring.io e importar dentro do STS
ou criar diretamente pelo STS.

docker run --name postbanco -e POSTGRES_PASSWORD=123 -d -p 5432:5432 postgres
MacBook-Air-de-Julio:~ julio$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                    
9c7254589f45        postgres            "docker-entrypoint.s…"   36 seconds ago      Up 35 seconds             0.0.0.0:5432->5432/tcp 

senha do banco de dados: 123

- pom.xml é o arquivo de configuração do maven onde serão colocadas as dependencias.
- Em um projeto Spring podemos trabalhar com REST e MVC ao mesmo tempo, podemos
trabalhar com vários tipos de arquitetura dentro de um mesmo projeto.
- application.properties é o arquivo onde fica todas as configurações para se conectar
no banco de dados via driver JDBC, como string de conexão, porta, usuario, senha 
e etc.
- O arquivo application.properties fica no seguinte caminho:
     /src/main/resources/application.properties

- É necessário pesquisar o dialeto do banco de dados para o Hibernate.
- Exemplo de passagem de parametro na url:
    http://localhost:8080/usuario/?nome=Julio

@RestController /* Para a classe aceitar métodos REST */
@RequestMapping(value = "/usuario") /* Estou mapeando para /usuario */
public class IndexController {

	@GetMapping(value = "/", produces = "application/json") /* Estou mapeando para a raíz de /usuario/. */
	/* Vou receber um parametro chamado nome do tipo String. */
	public ResponseEntity init(@RequestParam(value = "nome") String nome ) {
		return new ResponseEntity("Olá usuário REST Spring Boot seu nome é: " + nome, HttpStatus.OK);
	}
}

- Acima está um exemplo básico de chamada de método REST com passagem de parametro na url.
- Para não dar erro é sempre necessário assumir um valor padrão.
- Para passar mais de um parametro na url usamos o &, veja abaixo:
    http://localhost:8080/usuario/?nome=Julio&salario=3000

 Retornando usuário em JSON para a tela
----------
- Para consultar usuarios usamos o método GET.

Criando nosso serviço POST e efetuando um cadastro de usuário
---------
- Para cadastrar um usuário usamos o método POST.
- Exemplo de objeto no formato json a ser passado em uma requisição POST
        
        {
        "id": null,
        "login": "marcela@gmail.com",
        "senha": "123",
        "nome": "Marcela Misale"
        }

- O id deve ser passado como nulo para não dar erro de violação de constraint, 
pois no banco de dados o mesmo está como autoincremento.

 Criando a atualização de cadastro com o PUT

 - Quando usamos o eclipse e criamos um projeto com o maven para carregar as 
 dependencias acontece que o eclipse usa o maven interno dele,  quando é interno
 não conseguimos usar vários recursos que precisamos no desenvolvimento.
 - O eclipse também vem com o servidor TomCat interno, também podemos usar o 
 servidor TomCat de forma externa no eclipse.
 - Com o Spring Boot se quisermos gerar um arquivo War ou então um Jar 
 autoexecutável para implantar a nossa aplicação em algum local então iremos 
 precisar do maven mas não o que está dentro do eclipse.
 - Precisaremos instalar o maven externamente e por linha de comando dar o 
 comando de build para gerar o arquivo war/jar para então implantar em algum
 servidor.
 
 export JAVA_HOME=/usr/local/Cellar/openjdk/15.0.1/libexec/openjdk.jdk/Contents/Home
 echo ${JAVA_HOME}

 export MAVEN_HOME=/usr/local/Cellar/maven/3.6.3_1
 echo ${MAVEN_HOME}

 export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH

 export CATALINA_HOME=/usr/local/Cellar/tomcat/9.0.43
 catalina start 

- Para verificar a versão do maven instalada:  mvn -v
- Para verificar a versão do TomCat instalado: catalina version

Configurando o contexto da nossa aplicação

- No arquivo application.properties adicionamos a seguinte linha abaixo: 
    server.servlet.context-path=/cursospringrestapi
- Para acessar ficara da seguinte forma: http://localhost:8080/cursospringrestapi/
- É importante configurar o contexto para sabermos qual projeto estamos 
acessando.

Gerando Jar executável da Aplicação Spring Boot

- O Jar e o War que são arquivos de implantação.
- Para gerar o arquivo de implantação digitamos: mvn package 
- O arquivo de implantação será gerado dentro da pasta target
- O comando mvn package deve ser executado um diretório acima da pasta target
- Para rodar o arquivo de implantação digitamos:
    java -jar cursospringrestapi-0.0.1-SNAPSHOT.jar
- Podemos disponibilizar o arquivo jar para um amigo por exemplo, mas 
ele deve ter o sistema gerenciador de banco de dados instalado na máquina dele.

Gerando WAR e Implantando no Servidor

- Através do arquivo pom.xml decidimos que tipo de arquivo será gerado
através da tag packaging, veja abaixo:
    
    <packaging>jar</packaging>

- Para gerar o arquivo war é o mesmo comando que usamos para gerar o 
arquivo jar, digitamos mvn package um diretório acima da pasta target.
- O arquivo será gerado dentro da pasta target.

    cd /usr/local/Cellar/tomcat/9.0.43/libexec/webapps

- Para acessar o projeto basta somente iniciar o servidor TomCat
com o comando catalina start e acessar a seguinte url:
    http://localhost:8080/cursospringrestapi

- Basta colocar o arquivo war do projeto dentro da pasta webapps do servidor
TomCat.

Criando Relacionamento um para muitos

- http://localhost:8080/cursospringrestapi/usuario/

- Por enquanto temos apenas um objeto simples em nosso banco de dados.
- Vamos fazer um relacionamento um para muitos que é o mais comum quando
criamos um objeto simples.

 Implementando o END-POINT de atualização

    select usuario.id, usuario.login, usuario.nome, usuario.senha, telefone.numero
    from usuario inner join telefone
    on usuario.id = telefone.usuario_id;

    select * from telefone;

 Implantando a API na hospedagem

 - No curso de formação de Java Web temos os módulos que ensinam a fazer hospedagem.
 
 cd /Users/julio/Library/Mobile\ Documents/com\~apple\~CloudDocs/cursos/backend-spring-boot-rest/cursospringrestapi

 - Rodar o comando: mvn package
 - Sempre deixar o nome do arquivo de implantação com o mesmo nome do contexto.
 - Exemplo do nome do contexto:

    server.servlet.context-path=/cursospringrestapi 

- O nome do contexto fica no arquivo application.properties
- Temos que colocar o username e a senha do banco que estão na hospedagem.
- Descompactar o arquivo .war e editar o arquivo application.properties com o 
notepad++ por exemplo e colocar os dados do banco da hospedagem, usuario e senha.
- É necessário criar o banco de dados no servidor da hospedagem.
- Pode ficar localhost o inicio da string da conexão com o banco de dados 
pois vai subir localmente no servidor da hospedagem.
- Devemos saber como registrar dominio e contratar hospedagem.
- É essencial estudar o módulo de hospedagem.
- Devemos habilitar a API para aceitar solicitação de outra máquina depois
que ela já estiver hospedada, questões de segurança.
- Para ter o https de conexão segura deve ser contratado o plano de ssl.

Cross Origin - Controle de acesso a API

xxx.