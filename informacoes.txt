- Java Extension Pack
- Spring Boot Extension Pack que contém dentro:
    * Spring Boot Tools
    * Spring Initializr Java Support
    * Spring Boot Dashboard
- Lombok Annotations Support for VS Code
- Para ver a tela do Java OverView apertar command + shift + p 
e digitar OverView
- Temos que ter o maven instalado no Mac
- Verificar se o gerenciador de dependencias Homebrew está instalado
- Digitar brew -v no terminal do Mac
- Para instalar o maven no Mac basta digitar no terminal brew install maven
- Para verificar se o maven está instalado digitamos: mvn --version
- No momento da criação escolher lombok e restRepositories.

- Vamos criar nosso projeto usando o Spring Tool Suite (STS).
- O primeiro passo é configurar o projeto com tudo que iremos precisar.
- Podemos criar o projeto pelo site do spring.io e importar dentro do STS
ou criar diretamente pelo STS.

docker run --name postbanco -e POSTGRES_PASSWORD=123 -d -p 5432:5432 postgres
MacBook-Air-de-Julio:~ julio$ docker ps -a
CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS                    
9c7254589f45        postgres            "docker-entrypoint.s…"   36 seconds ago      Up 35 seconds             0.0.0.0:5432->5432/tcp 

senha do banco de dados: 123

- pom.xml é o arquivo de configuração do maven onde serão colocadas as dependencias.
- Em um projeto Spring podemos trabalhar com REST e MVC ao mesmo tempo, podemos
trabalhar com vários tipos de arquitetura dentro de um mesmo projeto.
- application.properties é o arquivo onde fica todas as configurações para se conectar
no banco de dados via driver JDBC, como string de conexão, porta, usuario, senha 
e etc.
- O arquivo application.properties fica no seguinte caminho:
     /src/main/resources/application.properties

- É necessário pesquisar o dialeto do banco de dados para o Hibernate.
- Exemplo de passagem de parametro na url:
    http://localhost:8080/usuario/?nome=Julio

@RestController /* Para a classe aceitar métodos REST */
@RequestMapping(value = "/usuario") /* Estou mapeando para /usuario */
public class IndexController {

	@GetMapping(value = "/", produces = "application/json") /* Estou mapeando para a raíz de /usuario/. */
	/* Vou receber um parametro chamado nome do tipo String. */
	public ResponseEntity init(@RequestParam(value = "nome") String nome ) {
		return new ResponseEntity("Olá usuário REST Spring Boot seu nome é: " + nome, HttpStatus.OK);
	}
}

- Acima está um exemplo básico de chamada de método REST com passagem de parametro na url.
- Para não dar erro é sempre necessário assumir um valor padrão.
- Para passar mais de um parametro na url usamos o &, veja abaixo:
    http://localhost:8080/usuario/?nome=Julio&salario=3000

 Retornando usuário em JSON para a tela
----------
- Para consultar usuarios usamos o método GET.

Criando nosso serviço POST e efetuando um cadastro de usuário
---------
- Para cadastrar um usuário usamos o método POST.
- Exemplo de objeto no formato json a ser passado em uma requisição POST
        
        {
        "id": null,
        "login": "marcela@gmail.com",
        "senha": "123",
        "nome": "Marcela Misale"
        }

- O id deve ser passado como nulo para não dar erro de violação de constraint, 
pois no banco de dados o mesmo está como autoincremento.

 Criando a atualização de cadastro com o PUT

 - Quando usamos o eclipse e criamos um projeto com o maven para carregar as 
 dependencias acontece que o eclipse usa o maven interno dele,  quando é interno
 não conseguimos usar vários recursos que precisamos no desenvolvimento.
 - O eclipse também vem com o servidor TomCat interno, também podemos usar o 
 servidor TomCat de forma externa no eclipse.
 - Com o Spring Boot se quisermos gerar um arquivo War ou então um Jar 
 autoexecutável para implantar a nossa aplicação em algum local então iremos 
 precisar do maven mas não o que está dentro do eclipse.
 - Precisaremos instalar o maven externamente e por linha de comando dar o 
 comando de build para gerar o arquivo war/jar para então implantar em algum
 servidor.
 
 export JAVA_HOME=/usr/local/Cellar/openjdk/15.0.1/libexec/openjdk.jdk/Contents/Home
 echo ${JAVA_HOME}

 export MAVEN_HOME=/usr/local/Cellar/maven/3.6.3_1
 echo ${MAVEN_HOME}

 export PATH=$JAVA_HOME/bin:$MAVEN_HOME/bin:$PATH

 export CATALINA_HOME=/usr/local/Cellar/tomcat/9.0.43
 catalina start 

- Para verificar a versão do maven instalada:  mvn -v
- Para verificar a versão do TomCat instalado: catalina version

Configurando o contexto da nossa aplicação

- No arquivo application.properties adicionamos a seguinte linha abaixo: 
    server.servlet.context-path=/cursospringrestapi
- Para acessar ficara da seguinte forma: http://localhost:8080/cursospringrestapi/
- É importante configurar o contexto para sabermos qual projeto estamos 
acessando.

Gerando Jar executável da Aplicação Spring Boot

- O Jar e o War que são arquivos de implantação.
- Para gerar o arquivo de implantação digitamos: mvn package 
- O arquivo de implantação será gerado dentro da pasta target
- O comando mvn package deve ser executado um diretório acima da pasta target
- Para rodar o arquivo de implantação digitamos:
    java -jar cursospringrestapi-0.0.1-SNAPSHOT.jar
- Podemos disponibilizar o arquivo jar para um amigo por exemplo, mas 
ele deve ter o sistema gerenciador de banco de dados instalado na máquina dele.

Gerando WAR e Implantando no Servidor

- Através do arquivo pom.xml decidimos que tipo de arquivo será gerado
através da tag packaging, veja abaixo:
    
    <packaging>jar</packaging>

- Para gerar o arquivo war é o mesmo comando que usamos para gerar o 
arquivo jar, digitamos mvn package um diretório acima da pasta target.
- O arquivo será gerado dentro da pasta target.

    cd /usr/local/Cellar/tomcat/9.0.43/libexec/webapps

- Para acessar o projeto basta somente iniciar o servidor TomCat
com o comando catalina start e acessar a seguinte url:
    http://localhost:8080/cursospringrestapi

- Basta colocar o arquivo war do projeto dentro da pasta webapps do servidor
TomCat.

Criando Relacionamento um para muitos

- http://localhost:8080/cursospringrestapi/usuario/

- Por enquanto temos apenas um objeto simples em nosso banco de dados.
- Vamos fazer um relacionamento um para muitos que é o mais comum quando
criamos um objeto simples.

 Implementando o END-POINT de atualização

    select usuario.id, usuario.login, usuario.nome, usuario.senha, telefone.numero
    from usuario inner join telefone
    on usuario.id = telefone.usuario_id;

    select * from telefone;

 Implantando a API na hospedagem

 - No curso de formação de Java Web temos os módulos que ensinam a fazer hospedagem.
 
 cd /Users/julio/Library/Mobile\ Documents/com\~apple\~CloudDocs/cursos/backend-spring-boot-rest/cursospringrestapi

 - Rodar o comando: mvn package
 - Sempre deixar o nome do arquivo de implantação com o mesmo nome do contexto.
 - Exemplo do nome do contexto:

    server.servlet.context-path=/cursospringrestapi 

- O nome do contexto fica no arquivo application.properties
- Temos que colocar o username e a senha do banco que estão na hospedagem.
- Descompactar o arquivo .war e editar o arquivo application.properties com o 
notepad++ por exemplo e colocar os dados do banco da hospedagem, usuario e senha.
- É necessário criar o banco de dados no servidor da hospedagem.
- Pode ficar localhost o inicio da string da conexão com o banco de dados 
pois vai subir localmente no servidor da hospedagem.
- Devemos saber como registrar dominio e contratar hospedagem.
- É essencial estudar o módulo de hospedagem.
- Devemos habilitar a API para aceitar solicitação de outra máquina depois
que ela já estiver hospedada, questões de segurança.
- Para ter o https de conexão segura deve ser contratado o plano de ssl.

Cross Origin - Controle de acesso a API

- Por motivos de segurança, os navegadores proíbem chamadas ajax para 
recursos que residem fora da origem atual.
- Como uma API REST é feita para que vários clientes possam acessar então
surge o controle de acesso denominado CORS.
- Podemos fazer bloqueios e liberações bem customizadas para cada end-point,
para cada controller REST e seus end-point ou até mesmo para todo o projeto 
e seus end-points.

- Podemos liberar uma API somente para um determinado endereço, somente
para a empresa de fulano de tal por exemplo.
- É possível liberar apenas um end-point para uma empresa por exemplo.
- Toda a parte de segurança é bem customizada.

 Cross Origin - Testando a requisição AJAX

 - Toda API REST em Spring por default bloqueiam chamadas Ajax do jQuery.
 - Se tiver apenas a anotação @CrossOrigin no cabeçalho da classe controller
 significa que pode ser acessada de qualquer lugar, ou seja, através de 
 qualquer mecanismo, através de chamadas Ajax do jQuery por exemplo.
 - Podemos amarrar um servidor especifico a nossa API, pode ser por 
 dominio de url por exemplo.

 - Veja abaixo um exemplo:
    @CrossOrigin(origins = "https://www.projetojavaweb.com/")

- Podemos usar a anotação @CrossOrigin nos end-points, podemos restringir
o acesso ao método de consultar todos os usuários para apenas um servidor
por exemplo.
- Para liberar o acesso a todos deve-se colocar a anotação em cima no 
cabeçalho do controller, mas se for apenas para um end-point especifico
então deve-se retirar a anotação do cabeçalho do controller e jogar no
método que deseja liberar além de estabelecer critérios de liberação.

Configuração Global

- Podemos ter uma API gigante com vários métodos e mais de cem controllers 
por exemplo.
- Podemos definir todas as configurações de forma global para a nossa aplicação
inteira, isto é, incluindo todas os controllers e end-points, isso pode ser 
feito através da classe que possuí a anotação @SpringBootApplication e também
o método main()

Configuração Centralizada e Global

- Podemos ter um controller para cada regra de negócio.
- É possível centralizar tudo aonde tem o método SpringApplication que 
inicializa toda a aplicação.
- Precisaremos implementar uma interface chamada WebMvcConfigurer na classe
que da o start incial na aplicação, veja abaixo um exemplo:

    public class CursospringrestapiApplication implements WebMvcConfigurer 

- Através do método addCorsMappings podemos fazer todas as configurações, 
veja abaixo:

    /* Configuração Global de controle de acesso que reflete em todo o sistema. */
	@Override
	public void addCorsMappings(CorsRegistry registry) {

		/* Para liberar acesso a todos os controllers e end-points. */
		/* registry.addMapping("/**"); */

		/* Para todos os end-points que estao dentro do controller /usuario */
		/* Podemos restringir quais tipos de requisicoes que podem ser enviadas */
		/* É possivel restringir por origem, ou seja, quem esta requisitando. */
		registry.addMapping("/usuario/**").allowedMethods("POST").allowedOrigins("https://www.jdvtreinamentos.com.br");
	}

Spring Security - Configurando ROLE


- Vamos começar a configuração do Spring Security
- Só vamos poder acessar nossos métodos da API se for enviado junto um 
login e uma senha, mais adiante vamos ver sobre jwt que é autenticação por
token.
- Além do token tem usuario e senha para fazer a validação da API.
- Quando estamos trabalhando com REST a camada de front-end não tem uma sessão 
amarrada igual jsf, jsp ou seja um sistema MVC. O servidor não tem o controle
que determinado usuário está conectado, então toda requisição tem que ser validada
com usuario, senha e o token que é um hash (uma senha bem grande criptografada).
- Primeiro precisamos configurar todo o Spring Security.
- No Spring Security as nomenclaturas começam com Role que são os papéis, por
exemplo é um administrador, super-visor, gerente, secretário e etc.
- precisamos ter a dependencia do Spring Security dentro do pom.xml para o 
maven poder baixa-la.

- Devemos implementar a interface GrantedAuthority do Spring Security
na nossa classe Role.
- Devemos conectar a classe de Usuario com a classe de Role e mapear as 
tabelas corretamente no banco de dados.

 Spring Security - Configurando Usuário

 - Papéis são usados para permitir ou esconder acessos, esconder url e etc.
 - Para linkar a classe Usuario com a classe Role devemos implementar a 
 interface UserDetails no lugar da interface Serializable na classe Usuario.
 - A interface UserDetails é a interface do Spring Security para trabalhar
 com autorizações, é uma interface que se conecta com todo o núcleo do Spring
 Security.
 - Após implementar a interface UserDetails na classe Usuario seremos obrigados
 a implementar todos os métodos que a interface UserDetails propõe.
 - Por padrão todos os métodos do contrato da interface UserDetails venhem 
 desabilitados como false.
 
  Configurando o Repository e o Service

  - Agora vamos configurar o Repository e o Service, sendo que o service vai
  prover um serviço que vai ligar com um repository com acesso ao banco de dados.
  
   Configurando o Spring Security

   - Tudo antes de chegar no sistema vai ser interceptado pelo Spring Security,
   então ele vai fazer a validação, vai verificar se o usuario pode acessar ou 
   não e etc.

 JSON Web Token (JWT) - Introdução ao JWT

 - O JWT é um padrão (RFC-7519) de mercado que define como transmitir e 
 armazenar objetos JSON de forma compacta e segura entre diferentes aplicações
 usando a arquitetura REST ou Microserviços sendo RESTFUL e JSON.

 - Os dados nele contidos podem ser validados a qualquer momento pois o token
 é assinado digitalmente e sua validação é feita a cada requisição.

 - Ele é formado por três sessões: Header, Payload e Signature.

 - Header: Define informações sobre o tipo do token, nesse caso JWT.
 - Payload: Contém as informações da entidade autorizada no caso o usuário que
 fez o login.
 - Signature: A assinatura é a junção de todas as partes somando a uma chave de 
 assinatura ou certificado e tudo é codificado em Base64.

- Vantagens: Permite a comunicação segura entre diferentes sistemas e integrações,
também evita que os dados sejam capturados por rede e manipulados de forma errada 
por alguém com más intenções.
- Vamos unir as validações de login com usuario e senha com o JWT.
- As vezes não precisa do usuario e senha mas é obrigatório o token (JWT), pois 
ele tem toda uma assinatura, cabeçalho, informações, é possível validar até 
com certificado digital.
- Se eu fosse gerar uma nota fiscal eu teria que enviar um JSON para o 
servidor reconhecer que eu tenho autorização para gerar uma nota fiscal. 

- Em integrações com APIs sempre tem um token por trás.
- O JWT é gerado somente depois do usuario e senha serem validados, então
o servidor retorna o JWT para o cliente (navegador), depois o cliente 
responde para o servidor devolvendo o JWT para confirmar que ele ainda continua
logado.
- O JWT pode ser devolvido para o servidor no cabeçalho da requisição se for
por método GET ou no corpo da requisição se for por método POST.
- Quando trabalhamos com JWT não precisamos validar o usuário pela segunda vez
pois no token já esta a validação completa.
- Toda vez que for fazer uma requisição após o login será necessário entregar o token.

 JSON Web Token (JWT) - Estrutura de classes do projeto

 - WebConfigSecurity mapeia toda a parte de segurança e registra as classes de token.
 - Iremos criar 3 classes sendo que elas trabalham juntas, cada classe terá uma 
 responsabilidade, tudo será mapeado pelo Spring Security.
 
 - JWTLoginFilter: Extende de AbstractAuthenticationProcessingFilter e estabelece 
nosso gerenciador de token.
- JWTAPIAutenticacaoFilter: Extende de GenericFilterBean, é o nosso filtro que 
captura as requisições e diz para autenticar.
- WebConfigSecurity extende de WebSecurityConfigurerAdapter.
- JWTTokenAutenticacaoService: Gera o nosso token e também valida o token enviado.
- Obs.: Todas as classes começam com JWT para especificar que fazem parte do 
mesmo grupo que vai lidar com JWT.

* Criando a classe JwtLoginFilter
* JSON Web Token (JWT) - Criando a classe JwtApiAuthenticationFilter

- Por último precisamos terminar de configurar a classe WebConfigSecurity.

- Vamos testar se o nosso token JWT foi gerado corretamente.
- O login no Spring Security deverá ser sempre por POST.
- Para testar nossa API de login enviamos uma requisição POST para
    http://localhost:8080/cursospringrestapi/login
- Com o usuario e senha no formato JSON, veja abaixo um exemplo:
    
        {
            "login": "marcela",
            "senha": "123"
        }

- É necessário que a senha 123 do exemplo acima já esteja criptografada
no banco de dados com o BCryptPasswordEncoder, classe do Spring Security.

JSON Web Token (JWT) - Ententendo a geração do JWT

- Dando sucesso no login terá que ser retornado o código 200 de ok,
além de retornar o código token gerado no corpo da requisição, veja um exemplo abaixo:

    {"Authorization": "Bearer eyJhbGciOiJIUzUxMiJ9
    .eyJzdWIiOiJtYXJjZWxhIiwiZXhwIjoxNjEzOTEwNjc3fQ
    ._tfNs1lfwTNP22E3S-4JktHOp6_-m5rzoEEJMVi5uv7rWC7wh5c7T_3ce_DAwxpR2mzLkxJJWt86fljEfptyKw"}

- O código de autorização é dividido em três partes como podemos ver acima.
- O próximo passo é devolver o código gerado quando for fazer a próxima requisição,
- somente assim conseguiremos cadastrar, atualizar, deletar, consultar e fazer 
- outras operações.

Consultando e Deletando

- Agora vamos entender como consumir os end-points da nossa API RESTFULL.
- Para testar nossa API RESTFUL no postman para fazer uma consulta de usuario
por exemplo precisamos passar nosso token de autorização na aba Authorization
do postman, em type selecionamos Bearer Token e colamos nosso no token no campo,
o token deve ser adicionado sem sua parte inicial, ou seja, sem o Bearer e o 
espaço em branco, como no exemplo abaixo.

    eyJhbGciOiJIUzUxMiJ9
    .eyJzdWIiOiJtYXJjZWxhIiwiZXhwIjoxNjEzOTE1MzQ3fQ
    .oAWXa3nmkUR8YRRVeC5wjn6Y4tU2-4DTaDPQDwpTmbdCOSL0zTWFqpWQwDJzJ3iggngShD8guMhmvU-8IWcNWQ

- Enviamos a requisição do tipo GET para http://localhost:8080/cursospringrestapi/usuario/1
para consultar o usuario que possui o id numero 1, a solicitção foi feita já
com o token implantado no campo de token da aba Authorization do postman.

- Exemplo do que é retornado na consulta:
        {
            "id": 1,
            "login": "marcela",
            "senha": "$2a$10$WWwHPGVucL3claX0oh9ttOthlmM0kTYgUzTVDqywfWRutusIczQ3u",
            "nome": "marcela",
            "telefones": [],
            "enabled": true,
            "password": "$2a$10$WWwHPGVucL3claX0oh9ttOthlmM0kTYgUzTVDqywfWRutusIczQ3u",
            "authorities": [],
            "username": "marcela",
            "accountNonExpired": true,
            "accountNonLocked": true,
            "credentialsNonExpired": true
        }

- Podemos filtrar o que vai ser retornado no JSON.
- Também podemos passar o token no Header para fazer a requisição GET através do
postman, na aba Headerers passamos em key o nome Authorization e em value o 
nome Bearer espaço seguido da nossa chave token, funciona da mesma forma.
- Para consultar todos os usuarios enviamos uma requisição GET para 
http://localhost:8080/cursospringrestapi/usuario/ com as credenciais de token 
no corpo da requisição (Header) ou em Authorization no postman.

- Para deletar um usuario fazemos uma requisição do tipo DELETE para o end-point 
http://localhost:8080/cursospringrestapi/usuario/2 passando o id do usuario que 
queremos deletar, também é necessário passar a chave de autenticação no Header 
ou senão defini-lá em Authorization no postman.

JSON Web Token (JWT) - Cadastrando e editando

- O próximo passo agora é testar se nossa API está cadastrando e editando, 
se estiver então nossa API RESTFULL estará concluída.

- Cada usuario e senha tem um token exclusivo amarrado a ele, para gerar um 
novo token é necessário cadastrar um novo usuario no banco de dados
com id e login diferentes.

- Por enquanto eu não sei como destruir um token.
- Abaixo esta o token de autorização para o usuario e senha abaixo.

        {
            "login":"julio",
            "senha":"123"
        }

{"Authorization": "Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqdWxpbyIsImV4cCI6MTYxMzkyODU0M30.sHcng1iZdPw1zcgtnjVIrkzQXgpIBQNLZCD7PuLUN61YY0WovQA_oRAlgAOJjrC4DmcJtU9cPOS7-LYBw5LdMQ"}

- O usuario deve ser único no banco de dados para poder ser feita a validação.

Restringindo dados do usuário

- Devemos restringir dizendo que nosso atributo login da tabela de usuario é único,
- Podemos ignorar vários atributos na hora de montar o JSON menos o login e a senha,
senão fica impossível de realizar o login.

JSON Web Token (JWT) - Atualizando senha do usuário

- Não podemos criptografar novamente a senha que já está criptografada, temos que 
verificar se a senha que veio na hora de atualizar é igual a senha que está 
gravada no banco de dados, se for igual então significa que ela está criptografada,
se for diferente então devemos chamar o método de criptografia.

Versionamento de API

- Podemos liberar várias versões de um mesmo projeto mas com rotinas diferentes,
podemos ter duas versões de um método dentro do mesmo controller,
se por exemplo a versão 2 der problema o cliente pode voltar a usar a versão 1.

- Se não quisermos usar o versionamento pela URI então devemos usar uma váriavel
no headers especificando a versão, por exemplo X-API-Version=v1

- Siginifica que a versão 1 da API será consumida.
- Dentro de @GetMapping() podemos usar o atributo headers, por exemplo
headers = "X-API-Version=v1", podemos passar isso no headers pelo postman, sendo
que X-API-Version é o headers e o value é v1.

Pool de conexão com Hikari

 - No back-end quando temos um sistema, independente de ser uma API simples 
 ou de arquitetura RESTFULL ou até mesmo MVC, sempre haverá um pool de conexões
 trabalhando por trás só que as configurações básicas são muito básicas.

 - Quando precisamos de bastante performance, ou seja, muitos clientes se 
 conectando e fazendo operações no banco de dados, para ter performance e 
 maior agilidade do sistema nós temos que configurar um pool de conexões.

 - Quando um projeto sobe é iniciado um servidor interno, o apache TomCat 
 por exemplo, então ele vai conectar no banco de dados e ali fica uma conexão
 direta, quando há várias pessoas conectadas ao mesmo tempo e fazendo operações
 de inserir, consultar e etc., se tiver apenas uma conexão sendo gerenciada 
 então começa a ficar lento porque se há vários usuários então gera uma fila 
 para o banco de dados fazer as operações e demoraria para salvar por exemplo.

 - O pool de conexão faz uma cópia virtual da conexão existente, então tem 
 uma conexão única pai e ele cria várias outras a mais que podemos configurar,
 essas conexões ficam esperando requisições (o cliente), que são pessoas que
 estão usando o sistema pedirem para salvar ou fazer qualquer outra operação,
 por exemplo se houver dez conexões nesse pool então vai acontecer tudo
 instantaneamente.

 - Quando o assunto é performance além do código devemos focar no pool
 de conexões, uma das ferramentas usadas no Spring Boot para pool e que 
 tem uma integração super fácil é o Hikari.

 - O Hikari é usado para gerenciar fluxo de conexões, então ele cria várias 
 conexões que iremos configurar e fica esperando, quando as requisições 
 chegam ele automaticamente já faz a operação e o sistema fica rápido.

 - A primeira coisa que devemos fazer para colocar o pool de conexões 
 junto com o Srping Boot é ir no arquivo pom.xml do maven e adicionar 
 a dependencia do Hikari.

 - A dependencia se chama HikariCP.
 - Toda a configuração do pool de conexões é feita no arquivo application.properties.
 - Exemplo de uma configuração:

    # Número máximo de milisegundos que um cliente aguardará por uma conexão
    spring.datasource.hikari.connection-timeout = 20000

- No exemplo acima um cliente aguardará por 20 segundos para uma requisição
responder, se não houver resposta ao final desses 20 segundos então ocorrerá 
um erro de timeout.

- Se dentro desses 20 segundos houver uma alguma conexão liberada então o 
pool vai receber essa requisição e vai fazer o processo que tem que fazer,
por exemplo salvar um usuario no banco de dados.

    # Número máximo de conexões inativas mantidas pelo HirakiCP em um conjunto de conexões
    spring.datasource.hikari.minimum-idle = 10

- Acima é o número máximo de conexões que podem ficar em memória inativas.

    # Máximo do pool de conexão
    spring.datasource.hikari.maximum-pool-size = 40

- Se for um sistema grande pode deixar para aceitar 40 requisições ao mesmo tempo.

    # Tempo ocioso para conexão 
    spring.datasource.hikari.idle-timeout=10000

- Se uma conexão ficar inativa por 10 segundos então ela é destruída.

- Para dar commit automático no banco de dados.

    # Salvando dados no banco de dados automaticamente
    spring.datasource.hikari.auto-commit=true

Implementando o cache para performance

- Além do pool de conexões aonde o próprio framework no caso o Hikari consegue criar 
várias instancias da conexão e deixar preparado para quando houver requisições atende-las.

- Processos do nosso sistema, independente de qual arquitetura esteja usando, JSP, JSF, RESTFULL,
podem existir processos que são muito requisitados, por exemplo um relatório de média que é 
acessado de hora em hora, a questão é que esse relatório só muda a cada hora, vamos supor que nessa 
hora sejam feitas 100 requisições, ou seja, 100 pessoas imprimiram esse relatório, então toda vez
que uma das 100 pessoas fosse imprimir teria que ir no banco de dados e fazer todo o processo de 
consulta para mostrar sempre o mesmo resultado para cada uma das 100 pessoas. Então existem coisas 
que podem ficar em cache na memória na memória do servidor para ser mais rápido para mostrar para 
o usuario.

- Temos que adicionar a dependencia do spring-boot-starter-cache
- Adicionar no cabeçalho da classe que da o start na nossa aplicação a anotação @EnableCaching
- Adicionar no cabeçalho do método que chama o end-point que vamos acessar a anotação @Cacheable("cache_usuarios")
- Temos que sempre dar um nome para a anotação @Cacheable
- Podemos adicionar cacheamento em todos os métodos de requisição se quisermos
- O spring sabe se tem coisa nova no banco de dados ou não, se tiver coisa nova ele busca no banco,
se não tiver ele disponibiliza através da memória.

Conhecendo diferença entre CacheEvict e o CachePUT

- Tem que tomar cuidado para o cache não sobrecarregar e explodir por alta demanda de dados dentro dele,
se o cache explodir por falta de memória o servidor precisa ser reiniciado para reestabelecer tudo.

- O cache deve ser atualizado de acordo com alguma mudança, se houve mudança então busca no banco de 
dados e atualiza o cache, é necessário configurar para não ficar segurando o cache por muito tempo,
cache que não é atualizado há muito tempo precisa ser removido.

- Devemos usar @CacheEvict ao invés de @Cacheable, exemplo @CacheEvict("cache_usuarios")
- @CachePut serve para quando adicionarmos registro novo no banco de dados o cache indentificar
e trazer para o usuario, exemplo 	@CachePut("cache_usuarios")
- @CacheEvict: é utilizado nos métodos que alteram os dados, para limpar o cache.
- A cada chamada aos métodos que alteram o estado da tabela, o @CacheEvict é executado limpando o cache.
- @CachePut que faz expiração do cache após a atualização do registro de acordo com a chave.

JSON Web Token (JWT) - Autenticação com TOKEN em banco de dados

- Vamos uma validação com o token a nivel de banco de dados, por exemplo geramos um token para um 
usuario assim que cadastramos ele.
- Para cada usuário podemos ter um token cadastrado pra ele no banco de dados, a requisição só
será aceita se esse token for validado em nível de banco de dados. 
- Precisamos criar uma coluna na tabela de usuario para guardar o token do usuário no banco de
dados.

Controle de erros da API com @ControllerAdvice, @RestControllerAdvice e @ExceptionHandler

- Precisamos centralizar em um único ponto todos os lançamentos de exceções de nossa API.
- Quando temos um processo de API temos que retornar para o usuário uma mensagem com o 
erro exato do que está acontecendo.
- Vamos criar uma classe para interceptar as exceções e retornar para o cliente de uma forma 
mais bonita.

Tratamento do TOKEN Expirado

"TOKEN Expirado, faça login ou informe novo TOKEN"

Padrão DTO (Data Transfer Object) dentro de uma API ou projeto

- Se temos por exemplo os dados do usuario e queremos apenas trafegar os dados de um 
lado para outro, mas queremos esconder os nomes dos atributos reais, usamos DTO para 
não haver necessidade de mecher na classe de persistencia dos dados.

- Na tabela de usuario além dos atributos também temos os dados de acesso ao banco 
de dados, como configurações de chaves estrangeiras, e etc.

- Podemos ter uma classe DTO para carregar somente o nome, login e o cpf por exemplo.
- Mesmo existindo a anotação no Spring que o oculta os atributos na hora de montar o 
objeto JSON mas isso pode quebrar toda a regra de negócio da API.
- Usamos DTO quando queremos trafegar dados e esconder atributos da classe principal 
de persistencia.

 Atualizando TOKEN em novo loginBaixar

- Precisamos fazer um Update no banco de dados toda vez que um token é registrado 
para o usuario.
- 